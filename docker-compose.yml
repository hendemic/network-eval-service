# Docker Compose configuration for Network Evaluation Service

services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgres/data
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-netmon}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-netmon}
      - POSTGRES_DB=${POSTGRES_DB:-network_tests}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-netmon}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    ports:
      - "${WEB_PORT:-5000}:5000"
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-netmon}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-netmon}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      # Make sure this matches the database name created by the db service
      - POSTGRES_DB=${POSTGRES_DB:-network_tests}
      - POSTGRES_SCHEMA=${POSTGRES_SCHEMA:-network_eval}
      - FLASK_CONFIG=production
      - SECRET_KEY=${SECRET_KEY:-change_this_in_production}
    restart: unless-stopped

  # Database initialization service - runs once to set up tables
  db-init:
    build:
      context: .
      dockerfile: Dockerfile.web
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-netmon}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-netmon}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-network_tests}
      - POSTGRES_SCHEMA=${POSTGRES_SCHEMA:-network_eval}
    # Create a more robust initialization script
    command: >
      bash -c 'echo "Waiting for database to be fully ready..."
      sleep 5
      echo "Starting database initialization..."
      
      # First run the diagnostic script
      python -c "
import sys, os, time
import sqlalchemy as sa
from sqlalchemy.exc import OperationalError

# Get database details
db_user = os.environ.get(\"POSTGRES_USER\", \"netmon\")
db_pass = os.environ.get(\"POSTGRES_PASSWORD\", \"netmon\")
db_host = os.environ.get(\"POSTGRES_HOST\", \"db\")
db_port = os.environ.get(\"POSTGRES_PORT\", \"5432\")
db_name = os.environ.get(\"POSTGRES_DB\", \"network_tests\")

print(f\"Checking connection to {db_host}:{db_port}/{db_name} as {db_user}\")
db_url = f\"postgresql://{db_user}:{db_pass}@{db_host}:{db_port}/{db_name}\"

# Try to connect
max_retries = 5
retry_delay = 3

for attempt in range(max_retries):
    try:
        engine = sa.create_engine(db_url)
        with engine.connect() as conn:
            result = conn.execute(sa.text(\"SELECT 1\")).scalar()
            print(f\"Connection successful! Result: {result}\")
            break
    except OperationalError as e:
        print(f\"Attempt {attempt+1}/{max_retries} failed: {str(e)}\")
        if attempt < max_retries - 1:
            print(f\"Retrying in {retry_delay} seconds...\")
            time.sleep(retry_delay)
        else:
            print(\"All connection attempts failed\")
            sys.exit(1)
"

      # Then run the actual initialization
      python -c "
import sys, os
from backend.models import db, PingResult
from backend.app import create_app

try:
    app = create_app()
    with app.app_context():
        print(\"Creating database tables...\")
        db.create_all()
        print(f\"Created tables: {db.engine.table_names()}\")
        print(\"Database initialization successful!\")
except Exception as e:
    print(f\"Database initialization error: {str(e)}\", file=sys.stderr)
    sys.exit(1)
"'
    restart: "no"

  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-netmon}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-netmon}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-network_tests}
      - POSTGRES_SCHEMA=${POSTGRES_SCHEMA:-network_eval}
      - TEST_TARGET=${TEST_TARGET:-1.1.1.1}
      - TEST_COUNT=${TEST_COUNT:-100}
      - TEST_INTERVAL=${TEST_INTERVAL:-0.1}
    restart: unless-stopped

volumes:
  postgres_data: