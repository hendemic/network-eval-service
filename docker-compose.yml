# Docker Compose configuration for Network Evaluation Service

services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgres/data
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-netmon}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-netmon}
      - POSTGRES_DB=${POSTGRES_DB:-network_tests}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-netmon}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    ports:
      - "${WEB_PORT:-5000}:5000"
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-netmon}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-netmon}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-network_tests}
      - POSTGRES_SCHEMA=${POSTGRES_SCHEMA:-network_eval}
      - FLASK_CONFIG=production
      - SECRET_KEY=${SECRET_KEY:-change_this_in_production}
    restart: unless-stopped

  # Database initialization service - runs once to set up tables
  db-init:
    build:
      context: .
      dockerfile: Dockerfile.web
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-netmon}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-netmon}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-network_tests}
      - POSTGRES_SCHEMA=${POSTGRES_SCHEMA:-network_eval}
    command: >
      python -c "
      import sys
      from backend.models import db, PingResult
      from backend.app import create_app
      try:
          app = create_app()
          with app.app_context():
              print('Creating database tables...')
              db.create_all()
              print(f'Created tables: {db.engine.table_names()}')
              print('Database initialization successful!')
              if PingResult.query.count() == 0:
                  print('Warning: No data in PingResult table. Test container will populate it.')
      except Exception as e:
          print(f'Database initialization error: {str(e)}', file=sys.stderr)
          sys.exit(1)
      "
    restart: "no"

  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-netmon}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-netmon}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-network_tests}
      - POSTGRES_SCHEMA=${POSTGRES_SCHEMA:-network_eval}
      - TEST_TARGET=${TEST_TARGET:-1.1.1.1}
      - TEST_COUNT=${TEST_COUNT:-100}
      - TEST_INTERVAL=${TEST_INTERVAL:-0.1}
    restart: unless-stopped

volumes:
  postgres_data: